<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="454" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="437.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="437.00"> </text><svg id="frames" x="10" width="1180"><g><title>[[heap]] (2 samples, 2.35%)</title><rect x="0.0000%" y="373" width="2.3529%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="383.50">[..</text></g><g><title>[libpq.so.5.12] (2 samples, 2.35%)</title><rect x="0.0000%" y="357" width="2.3529%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="367.50">[..</text></g><g><title>_int_malloc (1 samples, 1.18%)</title><rect x="2.3529%" y="357" width="1.1765%" height="15" fill="rgb(221,193,54)"/><text x="2.6029%" y="367.50"></text></g><g><title>[[stack]] (2 samples, 2.35%)</title><rect x="2.3529%" y="373" width="2.3529%" height="15" fill="rgb(248,212,6)"/><text x="2.6029%" y="383.50">[..</text></g><g><title>initPQExpBuffer (1 samples, 1.18%)</title><rect x="3.5294%" y="357" width="1.1765%" height="15" fill="rgb(208,68,35)"/><text x="3.7794%" y="367.50"></text></g><g><title>__pthread_once_slow (1 samples, 1.18%)</title><rect x="4.7059%" y="245" width="1.1765%" height="15" fill="rgb(232,128,0)"/><text x="4.9559%" y="255.50"></text></g><g><title>[libgssapi_krb5.so.2.2] (1 samples, 1.18%)</title><rect x="4.7059%" y="229" width="1.1765%" height="15" fill="rgb(207,160,47)"/><text x="4.9559%" y="239.50"></text></g><g><title>[libgssapi_krb5.so.2.2] (1 samples, 1.18%)</title><rect x="4.7059%" y="213" width="1.1765%" height="15" fill="rgb(228,23,34)"/><text x="4.9559%" y="223.50"></text></g><g><title>[libgssapi_krb5.so.2.2] (1 samples, 1.18%)</title><rect x="4.7059%" y="197" width="1.1765%" height="15" fill="rgb(218,30,26)"/><text x="4.9559%" y="207.50"></text></g><g><title>_int_free (1 samples, 1.18%)</title><rect x="5.8824%" y="245" width="1.1765%" height="15" fill="rgb(220,122,19)"/><text x="6.1324%" y="255.50"></text></g><g><title>__GI__dl_catch_exception (2 samples, 2.35%)</title><rect x="7.0588%" y="85" width="2.3529%" height="15" fill="rgb(250,228,42)"/><text x="7.3088%" y="95.50">_..</text></g><g><title>openaux (2 samples, 2.35%)</title><rect x="7.0588%" y="69" width="2.3529%" height="15" fill="rgb(240,193,28)"/><text x="7.3088%" y="79.50">o..</text></g><g><title>_dl_map_object (2 samples, 2.35%)</title><rect x="7.0588%" y="53" width="2.3529%" height="15" fill="rgb(216,20,37)"/><text x="7.3088%" y="63.50">_..</text></g><g><title>strcmp (1 samples, 1.18%)</title><rect x="8.2353%" y="37" width="1.1765%" height="15" fill="rgb(206,188,39)"/><text x="8.4853%" y="47.50"></text></g><g><title>PQconnectPoll (10 samples, 11.76%)</title><rect x="4.7059%" y="357" width="11.7647%" height="15" fill="rgb(217,207,13)"/><text x="4.9559%" y="367.50">PQconnectPoll</text></g><g><title>[libpq.so.5.12] (10 samples, 11.76%)</title><rect x="4.7059%" y="341" width="11.7647%" height="15" fill="rgb(231,73,38)"/><text x="4.9559%" y="351.50">[libpq.so.5.12]</text></g><g><title>gss_acquire_cred (10 samples, 11.76%)</title><rect x="4.7059%" y="325" width="11.7647%" height="15" fill="rgb(225,20,46)"/><text x="4.9559%" y="335.50">gss_acquire_cred</text></g><g><title>gss_acquire_cred_from (10 samples, 11.76%)</title><rect x="4.7059%" y="309" width="11.7647%" height="15" fill="rgb(210,31,41)"/><text x="4.9559%" y="319.50">gss_acquire_cred_..</text></g><g><title>gss_indicate_mechs_by_attrs (10 samples, 11.76%)</title><rect x="4.7059%" y="293" width="11.7647%" height="15" fill="rgb(221,200,47)"/><text x="4.9559%" y="303.50">gss_indicate_mech..</text></g><g><title>gss_indicate_mechs (10 samples, 11.76%)</title><rect x="4.7059%" y="277" width="11.7647%" height="15" fill="rgb(226,26,5)"/><text x="4.9559%" y="287.50">gss_indicate_mechs</text></g><g><title>[libgssapi_krb5.so.2.2] (10 samples, 11.76%)</title><rect x="4.7059%" y="261" width="11.7647%" height="15" fill="rgb(249,33,26)"/><text x="4.9559%" y="271.50">[libgssapi_krb5.s..</text></g><g><title>krb5int_open_plugin (8 samples, 9.41%)</title><rect x="7.0588%" y="245" width="9.4118%" height="15" fill="rgb(235,183,28)"/><text x="7.3088%" y="255.50">krb5int_open_..</text></g><g><title>dlopen (8 samples, 9.41%)</title><rect x="7.0588%" y="229" width="9.4118%" height="15" fill="rgb(221,5,38)"/><text x="7.3088%" y="239.50">dlopen</text></g><g><title>[libdl-2.31.so] (8 samples, 9.41%)</title><rect x="7.0588%" y="213" width="9.4118%" height="15" fill="rgb(247,18,42)"/><text x="7.3088%" y="223.50">[libdl-2.31.s..</text></g><g><title>__GI__dl_catch_error (8 samples, 9.41%)</title><rect x="7.0588%" y="197" width="9.4118%" height="15" fill="rgb(241,131,45)"/><text x="7.3088%" y="207.50">__GI__dl_catc..</text></g><g><title>__GI__dl_catch_exception (8 samples, 9.41%)</title><rect x="7.0588%" y="181" width="9.4118%" height="15" fill="rgb(249,31,29)"/><text x="7.3088%" y="191.50">__GI__dl_catc..</text></g><g><title>[libdl-2.31.so] (8 samples, 9.41%)</title><rect x="7.0588%" y="165" width="9.4118%" height="15" fill="rgb(225,111,53)"/><text x="7.3088%" y="175.50">[libdl-2.31.s..</text></g><g><title>_dl_open (8 samples, 9.41%)</title><rect x="7.0588%" y="149" width="9.4118%" height="15" fill="rgb(238,160,17)"/><text x="7.3088%" y="159.50">_dl_open</text></g><g><title>__GI__dl_catch_exception (8 samples, 9.41%)</title><rect x="7.0588%" y="133" width="9.4118%" height="15" fill="rgb(214,148,48)"/><text x="7.3088%" y="143.50">__GI__dl_catc..</text></g><g><title>dl_open_worker (8 samples, 9.41%)</title><rect x="7.0588%" y="117" width="9.4118%" height="15" fill="rgb(232,36,49)"/><text x="7.3088%" y="127.50">dl_open_worker</text></g><g><title>_dl_map_object_deps (8 samples, 9.41%)</title><rect x="7.0588%" y="101" width="9.4118%" height="15" fill="rgb(209,103,24)"/><text x="7.3088%" y="111.50">_dl_map_objec..</text></g><g><title>_dl_dst_count (6 samples, 7.06%)</title><rect x="9.4118%" y="85" width="7.0588%" height="15" fill="rgb(229,88,8)"/><text x="9.6618%" y="95.50">_dl_dst_c..</text></g><g><title>index (6 samples, 7.06%)</title><rect x="9.4118%" y="69" width="7.0588%" height="15" fill="rgb(213,181,19)"/><text x="9.6618%" y="79.50">index</text></g><g><title>__GI___isoc99_sscanf (1 samples, 1.18%)</title><rect x="16.4706%" y="357" width="1.1765%" height="15" fill="rgb(254,191,54)"/><text x="16.7206%" y="367.50"></text></g><g><title>[unknown] (12 samples, 14.12%)</title><rect x="4.7059%" y="373" width="14.1176%" height="15" fill="rgb(241,83,37)"/><text x="4.9559%" y="383.50">[unknown]</text></g><g><title>diesel::type_impls::floats::&lt;impl diesel::deserialize::FromSql&lt;diesel::sql_types::Double,DB&gt; for f64&gt;::from_sql (1 samples, 1.18%)</title><rect x="17.6471%" y="357" width="1.1765%" height="15" fill="rgb(233,36,39)"/><text x="17.8971%" y="367.50"></text></g><g><title>__FRAME_END__ (1 samples, 1.18%)</title><rect x="18.8235%" y="373" width="1.1765%" height="15" fill="rgb(226,3,54)"/><text x="19.0735%" y="383.50"></text></g><g><title>std::sys::unix::args::imp::ARGV_INIT_ARRAY::init_wrapper (1 samples, 1.18%)</title><rect x="18.8235%" y="357" width="1.1765%" height="15" fill="rgb(245,192,40)"/><text x="19.0735%" y="367.50"></text></g><g><title>__GI_exit (1 samples, 1.18%)</title><rect x="27.0588%" y="341" width="1.1765%" height="15" fill="rgb(238,167,29)"/><text x="27.3088%" y="351.50"></text></g><g><title>__run_exit_handlers (1 samples, 1.18%)</title><rect x="27.0588%" y="325" width="1.1765%" height="15" fill="rgb(232,182,51)"/><text x="27.3088%" y="335.50"></text></g><g><title>_dl_fini (1 samples, 1.18%)</title><rect x="27.0588%" y="309" width="1.1765%" height="15" fill="rgb(231,60,39)"/><text x="27.3088%" y="319.50"></text></g><g><title>[libgssapi_krb5.so.2.2] (1 samples, 1.18%)</title><rect x="27.0588%" y="293" width="1.1765%" height="15" fill="rgb(208,69,12)"/><text x="27.3088%" y="303.50"></text></g><g><title>remove_error_table (1 samples, 1.18%)</title><rect x="27.0588%" y="277" width="1.1765%" height="15" fill="rgb(235,93,37)"/><text x="27.3088%" y="287.50"></text></g><g><title>__libc_csu_init (5 samples, 5.88%)</title><rect x="28.2353%" y="341" width="5.8824%" height="15" fill="rgb(213,116,39)"/><text x="28.4853%" y="351.50">__libc_..</text></g><g><title>std::sys::unix::args::imp::ARGV_INIT_ARRAY::init_wrapper (5 samples, 5.88%)</title><rect x="28.2353%" y="325" width="5.8824%" height="15" fill="rgb(222,207,29)"/><text x="28.4853%" y="335.50">std::sy..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (5 samples, 5.88%)</title><rect x="36.4706%" y="213" width="5.8824%" height="15" fill="rgb(206,96,30)"/><text x="36.7206%" y="223.50">&lt;alloc:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 1.18%)</title><rect x="42.3529%" y="213" width="1.1765%" height="15" fill="rgb(218,138,4)"/><text x="42.6029%" y="223.50"></text></g><g><title>__GI___libc_malloc (1 samples, 1.18%)</title><rect x="42.3529%" y="197" width="1.1765%" height="15" fill="rgb(250,191,14)"/><text x="42.6029%" y="207.50"></text></g><g><title>_int_malloc (1 samples, 1.18%)</title><rect x="42.3529%" y="181" width="1.1765%" height="15" fill="rgb(239,60,40)"/><text x="42.6029%" y="191.50"></text></g><g><title>&lt;diesel::query_builder::insert_statement::InsertStatement&lt;T,U,Op,Ret&gt; as diesel::query_builder::QueryFragment&lt;DB&gt;&gt;::walk_ast (1 samples, 1.18%)</title><rect x="43.5294%" y="197" width="1.1765%" height="15" fill="rgb(206,27,48)"/><text x="43.7794%" y="207.50"></text></g><g><title>&lt;diesel::insertable::BatchInsert&lt;T,Tab&gt; as diesel::query_builder::QueryFragment&lt;DB&gt;&gt;::walk_ast (1 samples, 1.18%)</title><rect x="43.5294%" y="181" width="1.1765%" height="15" fill="rgb(225,35,8)"/><text x="43.7794%" y="191.50"></text></g><g><title>diesel::type_impls::tuples::&lt;impl diesel::query_builder::QueryFragment&lt;__DB&gt; for (A,B,C,D,E,F,G,H)&gt;::walk_ast (1 samples, 1.18%)</title><rect x="43.5294%" y="165" width="1.1765%" height="15" fill="rgb(250,213,24)"/><text x="43.7794%" y="175.50"></text></g><g><title>&lt;diesel::query_builder::bind_collector::RawBytesBindCollector&lt;DB&gt; as diesel::query_builder::bind_collector::BindCollector&lt;DB&gt;&gt;::push_bound_value (1 samples, 1.18%)</title><rect x="43.5294%" y="149" width="1.1765%" height="15" fill="rgb(247,123,22)"/><text x="43.7794%" y="159.50"></text></g><g><title>__GI___libc_free (1 samples, 1.18%)</title><rect x="44.7059%" y="197" width="1.1765%" height="15" fill="rgb(231,138,38)"/><text x="44.9559%" y="207.50"></text></g><g><title>diesel::connection::statement_cache::StatementCacheKey&lt;DB&gt;::construct_sql (1 samples, 1.18%)</title><rect x="45.8824%" y="181" width="1.1765%" height="15" fill="rgb(231,145,46)"/><text x="46.1324%" y="191.50"></text></g><g><title>&lt;diesel::query_builder::insert_statement::InsertStatement&lt;T,U,Op,Ret&gt; as diesel::query_builder::QueryFragment&lt;DB&gt;&gt;::walk_ast (1 samples, 1.18%)</title><rect x="45.8824%" y="165" width="1.1765%" height="15" fill="rgb(251,118,11)"/><text x="46.1324%" y="175.50"></text></g><g><title>&lt;diesel::insertable::OwnedBatchInsert&lt;diesel::query_builder::insert_statement::ValuesClause&lt;Inner,Tab&gt;,Tab&gt; as diesel::query_builder::QueryFragment&lt;DB&gt;&gt;::walk_ast (1 samples, 1.18%)</title><rect x="45.8824%" y="149" width="1.1765%" height="15" fill="rgb(217,147,25)"/><text x="46.1324%" y="159.50"></text></g><g><title>diesel::type_impls::tuples::&lt;impl diesel::query_builder::QueryFragment&lt;__DB&gt; for (A,B,C,D,E,F,G,H,I,J,K,L)&gt;::walk_ast (1 samples, 1.18%)</title><rect x="45.8824%" y="133" width="1.1765%" height="15" fill="rgb(247,81,37)"/><text x="46.1324%" y="143.50"></text></g><g><title>&lt;diesel::pg::query_builder::PgQueryBuilder as diesel::query_builder::QueryBuilder&lt;diesel::pg::backend::Pg&gt;&gt;::push_bind_param (1 samples, 1.18%)</title><rect x="45.8824%" y="117" width="1.1765%" height="15" fill="rgb(209,12,38)"/><text x="46.1324%" y="127.50"></text></g><g><title>__GI___libc_free (1 samples, 1.18%)</title><rect x="45.8824%" y="101" width="1.1765%" height="15" fill="rgb(227,1,9)"/><text x="46.1324%" y="111.50"></text></g><g><title>diesel::connection::statement_cache::StatementCache&lt;DB,Statement&gt;::cached_statement (9 samples, 10.59%)</title><rect x="45.8824%" y="197" width="10.5882%" height="15" fill="rgb(248,47,43)"/><text x="46.1324%" y="207.50">diesel::connect..</text></g><g><title>diesel::pg::connection::PgConnection::prepare_query::{{closure}} (8 samples, 9.41%)</title><rect x="47.0588%" y="181" width="9.4118%" height="15" fill="rgb(221,10,30)"/><text x="47.3088%" y="191.50">diesel::pg::c..</text></g><g><title>diesel::pg::connection::stmt::Statement::prepare (8 samples, 9.41%)</title><rect x="47.0588%" y="165" width="9.4118%" height="15" fill="rgb(210,229,1)"/><text x="47.3088%" y="175.50">diesel::pg::c..</text></g><g><title>[libpq.so.5.12] (7 samples, 8.24%)</title><rect x="48.2353%" y="149" width="8.2353%" height="15" fill="rgb(222,148,37)"/><text x="48.4853%" y="159.50">[libpq.so.5..</text></g><g><title>PQgetResult (7 samples, 8.24%)</title><rect x="48.2353%" y="133" width="8.2353%" height="15" fill="rgb(234,67,33)"/><text x="48.4853%" y="143.50">PQgetResult</text></g><g><title>[libpq.so.5.12] (6 samples, 7.06%)</title><rect x="49.4118%" y="117" width="7.0588%" height="15" fill="rgb(247,98,35)"/><text x="49.6618%" y="127.50">[libpq.so..</text></g><g><title>[libpq.so.5.12] (6 samples, 7.06%)</title><rect x="49.4118%" y="101" width="7.0588%" height="15" fill="rgb(247,138,52)"/><text x="49.6618%" y="111.50">[libpq.so..</text></g><g><title>__GI___poll (5 samples, 5.88%)</title><rect x="50.5882%" y="85" width="5.8824%" height="15" fill="rgb(213,79,30)"/><text x="50.8382%" y="95.50">__GI___..</text></g><g><title>&lt;diesel::pg::connection::PgConnection as diesel::connection::Connection&gt;::execute_returning_count (12 samples, 14.12%)</title><rect x="43.5294%" y="213" width="14.1176%" height="15" fill="rgb(246,177,23)"/><text x="43.7794%" y="223.50">&lt;diesel::pg::connecti..</text></g><g><title>diesel::pg::connection::stmt::Statement::execute (1 samples, 1.18%)</title><rect x="56.4706%" y="197" width="1.1765%" height="15" fill="rgb(230,62,27)"/><text x="56.7206%" y="207.50"></text></g><g><title>PQexecPrepared (1 samples, 1.18%)</title><rect x="56.4706%" y="181" width="1.1765%" height="15" fill="rgb(216,154,8)"/><text x="56.7206%" y="191.50"></text></g><g><title>PQsendQueryPrepared (1 samples, 1.18%)</title><rect x="56.4706%" y="165" width="1.1765%" height="15" fill="rgb(244,35,45)"/><text x="56.7206%" y="175.50"></text></g><g><title>[libpq.so.5.12] (1 samples, 1.18%)</title><rect x="56.4706%" y="149" width="1.1765%" height="15" fill="rgb(251,115,12)"/><text x="56.7206%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::ResultShunt&lt;I,E&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 4.71%)</title><rect x="58.8235%" y="181" width="4.7059%" height="15" fill="rgb(240,54,50)"/><text x="59.0735%" y="191.50">&lt;core..</text></g><g><title>&lt;diesel::pg::connection::cursor::Cursor&lt;ST,T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 4.71%)</title><rect x="58.8235%" y="165" width="4.7059%" height="15" fill="rgb(233,84,52)"/><text x="59.0735%" y="175.50">&lt;dies..</text></g><g><title>diesel::type_impls::tuples::&lt;impl diesel::deserialize::FromSqlRow&lt;(SA,SB,SC,SD,SE,SF,SG,SH,SI,SJ,SK,SL,SM),__DB&gt; for (A,B,C,D,E,F,G,H,I,J,K,L,M)&gt;::build_from_row (4 samples, 4.71%)</title><rect x="58.8235%" y="149" width="4.7059%" height="15" fill="rgb(207,117,47)"/><text x="59.0735%" y="159.50">diese..</text></g><g><title>&lt;diesel::pg::connection::row::PgRow as diesel::row::Row&lt;diesel::pg::backend::Pg&gt;&gt;::take (2 samples, 2.35%)</title><rect x="61.1765%" y="133" width="2.3529%" height="15" fill="rgb(249,43,39)"/><text x="61.4265%" y="143.50">&lt;..</text></g><g><title>PQgetisnull (2 samples, 2.35%)</title><rect x="61.1765%" y="117" width="2.3529%" height="15" fill="rgb(209,38,44)"/><text x="61.4265%" y="127.50">P..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (6 samples, 7.06%)</title><rect x="57.6471%" y="197" width="7.0588%" height="15" fill="rgb(236,212,23)"/><text x="57.8971%" y="207.50">&lt;alloc::v..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 1.18%)</title><rect x="63.5294%" y="181" width="1.1765%" height="15" fill="rgb(242,79,21)"/><text x="63.7794%" y="191.50"></text></g><g><title>__GI___libc_realloc (1 samples, 1.18%)</title><rect x="63.5294%" y="165" width="1.1765%" height="15" fill="rgb(211,96,35)"/><text x="63.7794%" y="175.50"></text></g><g><title>_int_realloc (1 samples, 1.18%)</title><rect x="63.5294%" y="149" width="1.1765%" height="15" fill="rgb(253,215,40)"/><text x="63.7794%" y="159.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 1.18%)</title><rect x="63.5294%" y="133" width="1.1765%" height="15" fill="rgb(211,81,21)"/><text x="63.7794%" y="143.50"></text></g><g><title>diesel::connection::statement_cache::StatementCache&lt;DB,Statement&gt;::cached_statement (1 samples, 1.18%)</title><rect x="64.7059%" y="197" width="1.1765%" height="15" fill="rgb(208,190,38)"/><text x="64.9559%" y="207.50"></text></g><g><title>diesel::connection::statement_cache::StatementCacheKey&lt;DB&gt;::construct_sql (1 samples, 1.18%)</title><rect x="64.7059%" y="181" width="1.1765%" height="15" fill="rgb(235,213,38)"/><text x="64.9559%" y="191.50"></text></g><g><title>&lt;diesel::query_builder::select_statement::SelectStatement&lt;F,S,D,W,O,L,Of,G,LC&gt; as diesel::query_builder::QueryFragment&lt;DB&gt;&gt;::walk_ast (1 samples, 1.18%)</title><rect x="64.7059%" y="165" width="1.1765%" height="15" fill="rgb(237,122,38)"/><text x="64.9559%" y="175.50"></text></g><g><title>&lt;diesel::pg::query_builder::PgQueryBuilder as diesel::query_builder::QueryBuilder&lt;diesel::pg::backend::Pg&gt;&gt;::push_sql (1 samples, 1.18%)</title><rect x="64.7059%" y="149" width="1.1765%" height="15" fill="rgb(244,218,35)"/><text x="64.9559%" y="159.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 1.18%)</title><rect x="64.7059%" y="133" width="1.1765%" height="15" fill="rgb(240,68,47)"/><text x="64.9559%" y="143.50"></text></g><g><title>[libpq.so.5.12] (3 samples, 3.53%)</title><rect x="78.8235%" y="117" width="3.5294%" height="15" fill="rgb(210,16,53)"/><text x="79.0735%" y="127.50">[li..</text></g><g><title>&lt;diesel::pg::connection::PgConnection as diesel::connection::Connection&gt;::query_by_index (22 samples, 25.88%)</title><rect x="57.6471%" y="213" width="25.8824%" height="15" fill="rgb(235,124,12)"/><text x="57.8971%" y="223.50">&lt;diesel::pg::connection::PgConnection as ..</text></g><g><title>diesel::pg::connection::stmt::Statement::execute (15 samples, 17.65%)</title><rect x="65.8824%" y="197" width="17.6471%" height="15" fill="rgb(224,169,11)"/><text x="66.1324%" y="207.50">diesel::pg::connection::stm..</text></g><g><title>[libpq.so.5.12] (15 samples, 17.65%)</title><rect x="65.8824%" y="181" width="17.6471%" height="15" fill="rgb(250,166,2)"/><text x="66.1324%" y="191.50">[libpq.so.5.12]</text></g><g><title>PQgetResult (15 samples, 17.65%)</title><rect x="65.8824%" y="165" width="17.6471%" height="15" fill="rgb(242,216,29)"/><text x="66.1324%" y="175.50">PQgetResult</text></g><g><title>[libpq.so.5.12] (15 samples, 17.65%)</title><rect x="65.8824%" y="149" width="17.6471%" height="15" fill="rgb(230,116,27)"/><text x="66.1324%" y="159.50">[libpq.so.5.12]</text></g><g><title>[libpq.so.5.12] (11 samples, 12.94%)</title><rect x="70.5882%" y="133" width="12.9412%" height="15" fill="rgb(228,99,48)"/><text x="70.8382%" y="143.50">[libpq.so.5.12]</text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 1.18%)</title><rect x="82.3529%" y="117" width="1.1765%" height="15" fill="rgb(253,11,6)"/><text x="82.6029%" y="127.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 1.18%)</title><rect x="83.5294%" y="213" width="1.1765%" height="15" fill="rgb(247,143,39)"/><text x="83.7794%" y="223.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 1.18%)</title><rect x="83.5294%" y="197" width="1.1765%" height="15" fill="rgb(236,97,10)"/><text x="83.7794%" y="207.50"></text></g><g><title>std::panic::catch_unwind (43 samples, 50.59%)</title><rect x="35.2941%" y="309" width="50.5882%" height="15" fill="rgb(233,208,19)"/><text x="35.5441%" y="319.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (43 samples, 50.59%)</title><rect x="35.2941%" y="293" width="50.5882%" height="15" fill="rgb(216,164,2)"/><text x="35.5441%" y="303.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (43 samples, 50.59%)</title><rect x="35.2941%" y="277" width="50.5882%" height="15" fill="rgb(220,129,5)"/><text x="35.5441%" y="287.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (43 samples, 50.59%)</title><rect x="35.2941%" y="261" width="50.5882%" height="15" fill="rgb(242,17,10)"/><text x="35.5441%" y="271.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::rt::lang_start::{{closure}} (43 samples, 50.59%)</title><rect x="35.2941%" y="245" width="50.5882%" height="15" fill="rgb(242,107,0)"/><text x="35.5441%" y="255.50">std::rt::lang_start::{{closure}}</text></g><g><title>ringmaster::main (43 samples, 50.59%)</title><rect x="35.2941%" y="229" width="50.5882%" height="15" fill="rgb(251,28,31)"/><text x="35.5441%" y="239.50">ringmaster::main</text></g><g><title>ringmaster::handleteamstats (1 samples, 1.18%)</title><rect x="84.7059%" y="213" width="1.1765%" height="15" fill="rgb(233,223,10)"/><text x="84.9559%" y="223.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S&gt;&gt;::rustc_entry (1 samples, 1.18%)</title><rect x="84.7059%" y="197" width="1.1765%" height="15" fill="rgb(215,21,27)"/><text x="84.9559%" y="207.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 1.18%)</title><rect x="84.7059%" y="181" width="1.1765%" height="15" fill="rgb(232,23,21)"/><text x="84.9559%" y="191.50"></text></g><g><title>__libc_start_main (51 samples, 60.00%)</title><rect x="27.0588%" y="357" width="60.0000%" height="15" fill="rgb(244,5,23)"/><text x="27.3088%" y="367.50">__libc_start_main</text></g><g><title>main (45 samples, 52.94%)</title><rect x="34.1176%" y="341" width="52.9412%" height="15" fill="rgb(226,81,46)"/><text x="34.3676%" y="351.50">main</text></g><g><title>std::rt::lang_start_internal (44 samples, 51.76%)</title><rect x="35.2941%" y="325" width="51.7647%" height="15" fill="rgb(247,70,30)"/><text x="35.5441%" y="335.50">std::rt::lang_start_internal</text></g><g><title>std::sys::unix::thread::guard::init (1 samples, 1.18%)</title><rect x="85.8824%" y="309" width="1.1765%" height="15" fill="rgb(212,68,19)"/><text x="86.1324%" y="319.50"></text></g><g><title>std::sys::unix::thread::guard::get_stack_start_aligned (1 samples, 1.18%)</title><rect x="85.8824%" y="293" width="1.1765%" height="15" fill="rgb(240,187,13)"/><text x="86.1324%" y="303.50"></text></g><g><title>std::sys::unix::thread::guard::get_stack_start (1 samples, 1.18%)</title><rect x="85.8824%" y="277" width="1.1765%" height="15" fill="rgb(223,113,26)"/><text x="86.1324%" y="287.50"></text></g><g><title>pthread_getattr_np (1 samples, 1.18%)</title><rect x="85.8824%" y="261" width="1.1765%" height="15" fill="rgb(206,192,2)"/><text x="86.1324%" y="271.50"></text></g><g><title>__fopen_internal (1 samples, 1.18%)</title><rect x="85.8824%" y="245" width="1.1765%" height="15" fill="rgb(241,108,4)"/><text x="86.1324%" y="255.50"></text></g><g><title>malloc_hook_ini (1 samples, 1.18%)</title><rect x="85.8824%" y="229" width="1.1765%" height="15" fill="rgb(247,173,49)"/><text x="86.1324%" y="239.50"></text></g><g><title>ptmalloc_init.part.0 (1 samples, 1.18%)</title><rect x="85.8824%" y="213" width="1.1765%" height="15" fill="rgb(224,114,35)"/><text x="86.1324%" y="223.50"></text></g><g><title>__GI__dl_addr (1 samples, 1.18%)</title><rect x="85.8824%" y="197" width="1.1765%" height="15" fill="rgb(245,159,27)"/><text x="86.1324%" y="207.50"></text></g><g><title>__GI___tunables_init (1 samples, 1.18%)</title><rect x="87.0588%" y="325" width="1.1765%" height="15" fill="rgb(245,172,44)"/><text x="87.3088%" y="335.50"></text></g><g><title>_dl_map_object_from_fd (1 samples, 1.18%)</title><rect x="88.2353%" y="245" width="1.1765%" height="15" fill="rgb(236,23,11)"/><text x="88.4853%" y="255.50"></text></g><g><title>_dl_map_object_deps (2 samples, 2.35%)</title><rect x="88.2353%" y="309" width="2.3529%" height="15" fill="rgb(205,117,38)"/><text x="88.4853%" y="319.50">_..</text></g><g><title>_dl_catch_exception (2 samples, 2.35%)</title><rect x="88.2353%" y="293" width="2.3529%" height="15" fill="rgb(237,72,25)"/><text x="88.4853%" y="303.50">_..</text></g><g><title>openaux (2 samples, 2.35%)</title><rect x="88.2353%" y="277" width="2.3529%" height="15" fill="rgb(244,70,9)"/><text x="88.4853%" y="287.50">o..</text></g><g><title>_dl_map_object (2 samples, 2.35%)</title><rect x="88.2353%" y="261" width="2.3529%" height="15" fill="rgb(217,125,39)"/><text x="88.4853%" y="271.50">_..</text></g><g><title>strcmp (1 samples, 1.18%)</title><rect x="89.4118%" y="245" width="1.1765%" height="15" fill="rgb(235,36,10)"/><text x="89.6618%" y="255.50"></text></g><g><title>all (85 samples, 100%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(251,123,47)"/><text x="0.2500%" y="415.50"></text></g><g><title>ringmaster (85 samples, 100.00%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(221,13,13)"/><text x="0.2500%" y="399.50">ringmaster</text></g><g><title>_start (68 samples, 80.00%)</title><rect x="20.0000%" y="373" width="80.0000%" height="15" fill="rgb(238,131,9)"/><text x="20.2500%" y="383.50">_start</text></g><g><title>_dl_start (11 samples, 12.94%)</title><rect x="87.0588%" y="357" width="12.9412%" height="15" fill="rgb(211,50,8)"/><text x="87.3088%" y="367.50">_dl_start</text></g><g><title>_dl_sysdep_start (11 samples, 12.94%)</title><rect x="87.0588%" y="341" width="12.9412%" height="15" fill="rgb(245,182,24)"/><text x="87.3088%" y="351.50">_dl_sysdep_start</text></g><g><title>dl_main (10 samples, 11.76%)</title><rect x="88.2353%" y="325" width="11.7647%" height="15" fill="rgb(242,14,37)"/><text x="88.4853%" y="335.50">dl_main</text></g><g><title>_dl_relocate_object (8 samples, 9.41%)</title><rect x="90.5882%" y="309" width="9.4118%" height="15" fill="rgb(246,228,12)"/><text x="90.8382%" y="319.50">_dl_relocate_..</text></g><g><title>_dl_lookup_symbol_x (6 samples, 7.06%)</title><rect x="92.9412%" y="293" width="7.0588%" height="15" fill="rgb(213,55,15)"/><text x="93.1912%" y="303.50">_dl_looku..</text></g><g><title>do_lookup_x (5 samples, 5.88%)</title><rect x="94.1176%" y="277" width="5.8824%" height="15" fill="rgb(209,9,3)"/><text x="94.3676%" y="287.50">do_look..</text></g><g><title>check_match (1 samples, 1.18%)</title><rect x="98.8235%" y="261" width="1.1765%" height="15" fill="rgb(230,59,30)"/><text x="99.0735%" y="271.50"></text></g><g><title>strcmp (1 samples, 1.18%)</title><rect x="98.8235%" y="245" width="1.1765%" height="15" fill="rgb(209,121,21)"/><text x="99.0735%" y="255.50"></text></g></svg></svg>